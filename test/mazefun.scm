(letrec ((_map0 (lambda (_f0 _l0) (let ((_103 (null? _l0))) (if _103 _l0 (let ((_104 (pair? _l0))) (if _104 (let ((_105 (car _l0))) (let ((_106 (_f0 _105))) (let ((_107 (cdr _l0))) (let ((_108 (_map0 _f0 _107))) (cons _106 _108))))) (error "Cannot map over a non-list")))))))) (letrec ((_append0 (lambda (_l1 _m0) (let ((_99 (null? _l1))) (if _99 _m0 (let ((_100 (car _l1))) (let ((_101 (cdr _l1))) (let ((_102 (_append0 _101 _m0))) (cons _100 _102))))))))) (letrec ((_foldr0 (lambda (_f1 _base0 _lst0) (letrec ((_foldr-aux0 (lambda (_lst1) (let ((_95 (null? _lst1))) (if _95 _base0 (let ((_96 (car _lst1))) (let ((_97 (cdr _lst1))) (let ((_98 (_foldr-aux0 _97))) (_f1 _96 _98))))))))) (_foldr-aux0 _lst0))))) (letrec ((_foldl0 (lambda (_f2 _base1 _lst2) (letrec ((_foldl-aux0 (lambda (_base2 _lst3) (let ((_91 (null? _lst3))) (if _91 _base2 (let ((_92 (car _lst3))) (let ((_93 (_f2 _base2 _92))) (let ((_94 (cdr _lst3))) (_foldl-aux0 _93 _94))))))))) (_foldl-aux0 _base1 _lst2))))) (letrec ((_for0 (lambda (_lo0 _hi0 _f3) (letrec ((_for-aux0 (lambda (_lo1) (let ((_87 (< _lo1 _hi0))) (if _87 (let ((_88 (_f3 _lo1))) (let ((_89 (+ _lo1 1))) (let ((_90 (_for-aux0 _89))) (cons _88 _90)))) '()))))) (_for-aux0 _lo0))))) (letrec ((_concat0 (lambda (_lists0) (let ((_86 '())) (_foldr0 _append0 _86 _lists0))))) (letrec ((_list-read0 (lambda (_lst4 _i0) (let ((_83 (= _i0 0))) (if _83 (car _lst4) (let ((_84 (cdr _lst4))) (let ((_85 (- _i0 1))) (_list-read0 _84 _85)))))))) (letrec ((_list-write0 (lambda (_lst5 _i1 _val0) (let ((_77 (= _i1 0))) (if _77 (let ((_78 (cdr _lst5))) (cons _val0 _78)) (let ((_79 (car _lst5))) (let ((_80 (cdr _lst5))) (let ((_81 (- _i1 1))) (let ((_82 (_list-write0 _80 _81 _val0))) (cons _79 _82)))))))))) (letrec ((_list-remove-pos0 (lambda (_lst6 _i2) (let ((_72 (= _i2 0))) (if _72 (cdr _lst6) (let ((_73 (car _lst6))) (let ((_74 (cdr _lst6))) (let ((_75 (- _i2 1))) (let ((_76 (_list-remove-pos0 _74 _75))) (cons _73 _76)))))))))) (letrec ((_duplicates?0 (lambda (_lst7) (let ((_67 (null? _lst7))) (if _67 #f (let ((_68 (car _lst7))) (let ((_69 (cdr _lst7))) (let ((_70 (member _68 _69))) (if _70 #t (let ((_71 (cdr _lst7))) (_duplicates?0 _71))))))))))) (letrec ((_make-matrix0 (lambda (_n0 _m1 _init0) (_for0 0 _n0 (lambda (_i3) (_for0 0 _m1 (lambda (_j0) (_init0 _i3 _j0)))))))) (letrec ((_matrix-read0 (lambda (_mat0 _i4 _j1) (let ((_66 (_list-read0 _mat0 _i4))) (_list-read0 _66 _j1))))) (letrec ((_matrix-write0 (lambda (_mat1 _i5 _j2 _val1) (let ((_64 (_list-read0 _mat1 _i5))) (let ((_65 (_list-write0 _64 _j2 _val1))) (_list-write0 _mat1 _i5 _65)))))) (letrec ((_matrix-size0 (lambda (_mat2) (let ((_61 (length _mat2))) (let ((_62 (car _mat2))) (let ((_63 (length _62))) (cons _61 _63))))))) (letrec ((_matrix-map0 (lambda (_f4 _mat3) (_map0 (lambda (_lst8) (_map0 _f4 _lst8)) _mat3)))) (letrec ((_initial-random0 0)) (letrec ((_next-random0 (lambda (_current-random0) (let ((_59 (* _current-random0 3581))) (let ((_60 (+ _59 12751))) (remainder _60 131072)))))) (letrec ((_shuffle-aux0 (lambda (_lst9 _current-random1) (let ((_54 (null? _lst9))) (if _54 '() (let ((_new-random0 (_next-random0 _current-random1))) (let ((_i6 (let ((_58 (length _lst9))) (modulo _new-random0 _58)))) (let ((_55 (_list-read0 _lst9 _i6))) (let ((_56 (_list-remove-pos0 _lst9 _i6))) (let ((_57 (_shuffle-aux0 _56 _new-random0))) (cons _55 _57))))))))))) (letrec ((_shuffle0 (lambda (_lst10) (_shuffle-aux0 _lst10 _initial-random0)))) (letrec ((_cave-to-maze0 (lambda (_cave0) (_matrix-map0 (lambda (_x0) (if _x0 '_ '*)) _cave0)))) (letrec ((_pierce0 (lambda (_pos0 _cave1) (let ((_i7 (car _pos0))) (let ((_j3 (cdr _pos0))) (_matrix-write0 _cave1 _i7 _j3 _pos0)))))) (letrec ((_neighboring-cavities0 (lambda (_pos1 _cave2) (let ((_size0 (_matrix-size0 _cave2))) (let ((_n1 (car _size0))) (let ((_m2 (cdr _size0))) (let ((_i8 (car _pos1))) (let ((_j4 (cdr _pos1))) (let ((_26 (> _i8 0))) (let ((_28 (if _26 (let ((_27 (- _i8 1))) (_matrix-read0 _cave2 _27 _j4)) #f))) (let ((_31 (if _28 (let ((_29 (- _i8 1))) (let ((_30 (cons _29 _j4))) (list _30))) '()))) (let ((_32 (- _n1 1))) (let ((_33 (< _i8 _32))) (let ((_35 (if _33 (let ((_34 (+ _i8 1))) (_matrix-read0 _cave2 _34 _j4)) #f))) (let ((_38 (if _35 (let ((_36 (+ _i8 1))) (let ((_37 (cons _36 _j4))) (list _37))) '()))) (let ((_39 (> _j4 0))) (let ((_41 (if _39 (let ((_40 (- _j4 1))) (_matrix-read0 _cave2 _i8 _40)) #f))) (let ((_44 (if _41 (let ((_42 (- _j4 1))) (let ((_43 (cons _i8 _42))) (list _43))) '()))) (let ((_45 (- _m2 1))) (let ((_46 (< _j4 _45))) (let ((_48 (if _46 (let ((_47 (+ _j4 1))) (_matrix-read0 _cave2 _i8 _47)) #f))) (let ((_51 (if _48 (let ((_49 (+ _j4 1))) (let ((_50 (cons _i8 _49))) (list _50))) '()))) (let ((_52 (_append0 _44 _51))) (let ((_53 (_append0 _38 _52))) (_append0 _31 _53))))))))))))))))))))))))) (letrec ((_change-cavity-aux0 (lambda (_cave3 _pos2 _new-cavity-id0 _old-cavity-id0) (let ((_i9 (car _pos2))) (let ((_j5 (cdr _pos2))) (let ((_cavity-id0 (_matrix-read0 _cave3 _i9 _j5))) (let ((_23 (equal? _cavity-id0 _old-cavity-id0))) (if _23 (let ((_24 (_matrix-write0 _cave3 _i9 _j5 _new-cavity-id0))) (let ((_25 (_neighboring-cavities0 _pos2 _cave3))) (_foldl0 (lambda (_c0 _nc0) (_change-cavity-aux0 _c0 _nc0 _new-cavity-id0 _old-cavity-id0)) _24 _25))) _cave3)))))))) (letrec ((_change-cavity0 (lambda (_cave4 _pos3 _new-cavity-id1) (let ((_i10 (car _pos3))) (let ((_j6 (cdr _pos3))) (let ((_22 (_matrix-read0 _cave4 _i10 _j6))) (_change-cavity-aux0 _cave4 _pos3 _new-cavity-id1 _22))))))) (letrec ((_try-to-pierce0 (lambda (_pos4 _cave5) (let ((_i11 (car _pos4))) (let ((_j7 (cdr _pos4))) (let ((_ncs0 (_neighboring-cavities0 _pos4 _cave5))) (let ((_19 (_map0 (lambda (_nc1) (let ((_17 (car _nc1))) (let ((_18 (cdr _nc1))) (_matrix-read0 _cave5 _17 _18)))) _ncs0))) (let ((_20 (_duplicates?0 _19))) (if _20 _cave5 (let ((_21 (_foldl0 (lambda (_c1 _nc2) (_change-cavity0 _c1 _nc2 _pos4)) _cave5 _ncs0))) (_pierce0 _pos4 _21))))))))))) (letrec ((_pierce-randomly0 (lambda (_possible-holes0 _cave6) (let ((_14 (null? _possible-holes0))) (if _14 _cave6 (let ((_hole0 (car _possible-holes0))) (let ((_15 (cdr _possible-holes0))) (let ((_16 (_try-to-pierce0 _hole0 _cave6))) (_pierce-randomly0 _15 _16))))))))) (letrec ((_make-maze0 (lambda (_n2 _m3) (let ((_1 (odd? _n2))) (let ((_2 (if _1 (odd? _m3) #f))) (let ((_3 (not _2))) (if _3 'error (let ((_cave7 (_make-matrix0 _n2 _m3 (lambda (_i12 _j8) (let ((_12 (even? _i12))) (let ((_13 (if _12 (even? _j8) #f))) (if _13 (cons _i12 _j8) #f))))))) (let ((_possible-holes1 (let ((_11 (_for0 0 _n2 (lambda (_i13) (let ((_10 (_for0 0 _m3 (lambda (_j9) (let ((_6 (even? _i13))) (let ((_7 (even? _j9))) (let ((_8 (equal? _6 _7))) (if _8 '() (let ((_9 (cons _i13 _j9))) (list _9)))))))))) (_concat0 _10)))))) (_concat0 _11)))) (let ((_4 (_shuffle0 _possible-holes1))) (let ((_5 (_pierce-randomly0 _4 _cave7))) (_cave-to-maze0 _5)))))))))))) (letrec ((_expected-result0 '((_ * _ _ _ _ _ _ _ _ _) (_ * * * * * * * _ * *) (_ _ _ * _ _ _ * _ _ _) (_ * _ * _ * _ * _ * _) (_ * _ _ _ * _ * _ * _) (* * _ * * * * * _ * _) (_ * _ _ _ _ _ _ _ * _) (_ * _ * _ * * * * * *) (_ _ _ * _ _ _ _ _ _ _) (_ * * * * * * * _ * *) (_ * _ _ _ _ _ _ _ _ _)))) (let ((_0 (_make-maze0 11 11))) (equal? _0 _expected-result0))))))))))))))))))))))))))))))
